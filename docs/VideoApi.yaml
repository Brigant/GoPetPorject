---
openapi: 3.0.0
info:
  title: Films Manager Api
  description: The api seerver wich allows to manage the list of films and a wish list
  contact:
    email: sergeyjuly@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:8080/
  description: Development and testing
tags:
- name: user
  description: Operations about user
paths:
  /user/sign-up:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201": {$ref: "#/components/responses/created"}
        #"400": {$ref: "#/components/responses/badRequest"}
        #"409": {$ref: "#/components/responses/conflict"}
        #"500": {$ref: "#/components/responses/internalServerError"}
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: type UUID
        phone:
          type: string
          description: play a role of username/login
        password:
          type: string
        age:
          type: integer
          format: int64
    UserCreateRequest:
      type: object
      required:
        - phone
        - age
        - password
      properties:
        phone:
          {
            description: it is simple phone number which will be used as login ,
            type: string,
            format: phone,
            maxLength: 25,
            uniqueItems: true,
            example: 380509991155,
          }
        age: { type: integer, example: 27 }
        password:
          {
            description: only ASCII symbols,
            type: string,
            format: password,
            example: "123456Aa",
          }
    UserCreateResponse:
      type: object
      required:
        - id
      properties:
        id:
          {
            description: uuid,
            type: string,
            format: uuid,
            example: "c0f01e3a-2dc3-4ea2-8d99-893b443697f9",
          }
  responses:
    created:
      description: Successful created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreateResponse'
